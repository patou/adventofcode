let test= [
[`3,15,3,16,1002,16,10,16,1,16,15,15,4,15,99,0,0`, [4,3,2,1,0]],
[`3,23,3,24,1002,24,10,24,1002,23,-1,23,101,5,23,23,1,24,23,23,4,23,99,0,0`,[0,1,2,3,4]],
[`3,31,3,32,1002,32,10,32,1001,31,-2,31,1007,31,0,33,1002,33,7,33,1,33,31,31,1,32,31,31,4,31,99,0,0,0`,[1,0,4,3,2]],
//[`3,225,1,225,6,6,1100,1,238,225,104,0,1101,40,27,224,101,-67,224,224,4,224,1002,223,8,223,1001,224,2,224,1,224,223,223,1101,33,38,225,1102,84,60,225,1101,65,62,225,1002,36,13,224,1001,224,-494,224,4,224,1002,223,8,223,1001,224,3,224,1,223,224,223,1102,86,5,224,101,-430,224,224,4,224,1002,223,8,223,101,6,224,224,1,223,224,223,1102,23,50,225,1001,44,10,224,101,-72,224,224,4,224,102,8,223,223,101,1,224,224,1,224,223,223,102,47,217,224,1001,224,-2303,224,4,224,102,8,223,223,101,2,224,224,1,223,224,223,1102,71,84,225,101,91,40,224,1001,224,-151,224,4,224,1002,223,8,223,1001,224,5,224,1,223,224,223,1101,87,91,225,1102,71,19,225,1,92,140,224,101,-134,224,224,4,224,1002,223,8,223,101,1,224,224,1,224,223,223,2,170,165,224,1001,224,-1653,224,4,224,1002,223,8,223,101,5,224,224,1,223,224,223,1101,49,32,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,1107,226,677,224,1002,223,2,223,1006,224,329,101,1,223,223,8,226,226,224,1002,223,2,223,1005,224,344,101,1,223,223,1007,677,226,224,102,2,223,223,1005,224,359,101,1,223,223,8,226,677,224,102,2,223,223,1005,224,374,101,1,223,223,1107,677,677,224,1002,223,2,223,1005,224,389,1001,223,1,223,108,226,677,224,102,2,223,223,1005,224,404,1001,223,1,223,108,677,677,224,1002,223,2,223,1006,224,419,101,1,223,223,107,677,677,224,102,2,223,223,1006,224,434,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,449,1001,223,1,223,8,677,226,224,1002,223,2,223,1005,224,464,101,1,223,223,1108,226,677,224,1002,223,2,223,1006,224,479,1001,223,1,223,1108,677,677,224,1002,223,2,223,1005,224,494,101,1,223,223,7,677,677,224,1002,223,2,223,1005,224,509,101,1,223,223,1007,677,677,224,1002,223,2,223,1005,224,524,101,1,223,223,7,677,226,224,1002,223,2,223,1005,224,539,101,1,223,223,1107,677,226,224,102,2,223,223,1006,224,554,101,1,223,223,107,226,677,224,1002,223,2,223,1005,224,569,101,1,223,223,107,226,226,224,1002,223,2,223,1005,224,584,101,1,223,223,1108,677,226,224,102,2,223,223,1006,224,599,1001,223,1,223,1008,677,677,224,102,2,223,223,1006,224,614,101,1,223,223,7,226,677,224,102,2,223,223,1005,224,629,101,1,223,223,1008,226,677,224,1002,223,2,223,1006,224,644,101,1,223,223,1007,226,226,224,1002,223,2,223,1005,224,659,1001,223,1,223,1008,226,226,224,102,2,223,223,1006,224,674,1001,223,1,223,4,223,99,226`, [4,1,2,3,0]]
]

const input = process.argv[3] || 5

function getParameters(tab, pos, param, parameters) {
  for (let p = param; p > 1; p--) parameters = Math.trunc(parameters / 10)
  let mode = parameters % 10
  let address = tab[pos + param]
  return mode == 1 ? address : tab[address]
}

function calc(tab, inputs) {
  //console.error(tab)
  //console.error(inputs)
  let pos = 0;
  let output;
  let input = 0;
  while(true) {
    let opcode = tab[pos] % 100
    let parameters = Math.trunc(tab[pos] / 100)
    //console.error(`opcode ${tab[pos]}`)
    switch (opcode) {
      case 99: return output
      case 1:
        tab[tab[pos+3]] = getParameters(tab, pos, 1, parameters) + getParameters(tab, pos, 2, parameters)
        pos += 4
        break;
      case 2:
        tab[tab[pos+3]] = getParameters(tab, pos, 1, parameters) * getParameters(tab, pos, 2, parameters)
        pos += 4
        break;
      case 3:
        tab[tab[pos+1]] = inputs[input++]
        if (input >= inputs.length) input = inputs.length - 1
        pos += 2
        break;
      case 4:
        output = getParameters(tab, pos, 1, parameters)
        console.log(output)
        pos += 2
        break;
      case 5:
        //console.error(`pos = (${getParameters(tab, pos, 1, parameters)} != 0) ? ${getParameters(tab, pos, 1, parameters)} : pos + 2`)
        if (getParameters(tab, pos, 1, parameters) != 0)
          pos = getParameters(tab, pos, 2, parameters)
        else
          pos += 3
        break;
      case 6:
        //console.error(`pos = (${getParameters(tab, pos, 1, parameters)} == 0) ? ${getParameters(tab, pos, 1, parameters)} : pos + 2`)
        if (getParameters(tab, pos, 1, parameters) == 0)
          pos = getParameters(tab, pos, 2, parameters)
        else
          pos += 3
        break;
      case 7:
        tab[tab[pos+3]] = (getParameters(tab, pos, 1, parameters) < getParameters(tab, pos, 2, parameters)) ? 1 : 0
        pos += 4
        break;
      case 8:
        tab[tab[pos+3]] = (getParameters(tab, pos, 1, parameters) == getParameters(tab, pos, 2, parameters)) ? 1 : 0
        pos += 4
        break;
      default:
        //console.error(`${tab[pos]} OPCODE ${opcode} not exist with ${parameters}`)
        return undefined;
    }
  }
}

function runAmp(prog, inputs) {
  let output = 0;
  let amp = 0;
  //console.log(`runAmp("...", [${inputs}])`)
  for (let seq of inputs) {
    let tab = prog.split(',').map(n => parseInt(n))
    output = calc(tab, [seq, output])
    //console.error(`${amp++}: seq ${seq} output ${output}`)
    if (output == undefined) return undefined
  }
  return output
}

const version = process.argv[2] || 0
if (version < test.length) {
  let inputs = test[version][1]
  runAmp(test[version][0], inputs)
}
else {
  let max = 0
  let prog = `3,8,1001,8,10,8,105,1,0,0,21,46,63,76,97,118,199,280,361,442,99999,3,9,102,4,9,9,101,2,9,9,1002,9,5,9,101,4,9,9,102,2,9,9,4,9,99,3,9,101,5,9,9,102,3,9,9,101,3,9,9,4,9,99,3,9,1001,9,2,9,102,3,9,9,4,9,99,3,9,1002,9,5,9,101,4,9,9,1002,9,3,9,101,2,9,9,4,9,99,3,9,1002,9,5,9,101,3,9,9,1002,9,5,9,1001,9,5,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,99,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,99`
  for (let i = 0; i < 5; i++)
    for (let j = 0; j < 5; j++)
      for (let k = 0; k < 5; k++)
       for (let l = 0; l < 5; l++)
         for (let m = 0; m < 5; m++) {
            let inputs = [i, j, k, l, m]
            //console.log(inputs)
            if (new Set(inputs).size == inputs.length) {
             let result = runAmp(prog, inputs)
             if (result == undefined) {
               console.error(`seq ${inputs} not work`)
               continue
             }
             max = Math.max(max, result)
            }
          }
  console.log(`max=${max}`)
}