let test = [
{input: `03036732577212944063491565474664`, phases: 100, result: `84462026`},
{input: `02935109699940807407585447034323`, phases: 100, result: `78725270`},
{input: `03081770884921959731165446850517`, phases: 100, result: `53553731`},
{input: ``, phases: 100, result: ``}
]

let version = process.argv[2] || 0
let input = test[version]

function calcPhases(input){
  const offset = Number(input.slice(0, 7));
  console.log(input.length)
  console.log(`Offset: ${offset}`)
  let signal = input.repeat(10000).split('').map(m => +m)
  let length = signal.length;
  console.log(`Length: ${length}`)
  for (let phase = 0; phase < 100; phase++){
    for (let i = length - 1; i > 0; i--) {
      signal[i] = Math.abs((signal[i + 1] || 0) + signal[i]) % 10;
    }
    console.log(`${phase}: ${signal.slice(offset, offset + 8).join('')}`)
  }
  return signal.slice(offset, offset + 8).join('')
}

console.log(`Result : ${calcPhases(input.input)} (${input.result})`)